(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["sprintFour"],{d4d5:function(e,t,a){"use strict";a.r(t);var n=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},o=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"sprintFour"},[a("h1",[e._v("Sprint Four")]),a("h3",[e._v("Application Developement")]),a("h4",{staticClass:"left"},[e._v("Sprint Four")]),a("div",{staticClass:"centered"},[a("p",[e._v("Following on from sprint three I stepped down from the development team manager and took on a developer role.")]),a("p",[e._v("As one of the developers I was tasked with creating the map page of the application. Originally all the map was was an image with some dots showing the locations of the stops. What was originally wanted by the team, was to make these dots an overlay on the image, and when they were cliked update the location. After a meeting with our Supervisor, he suggested that an actual map would be good to have. Once that could do the fucntions of a normal map. This is something I had done before and knew how to do. I implemented a leaflet map into our application using OpenStreetMaps tiles.")]),a("p",[e._v("Originally the points on the map, and the dropdown options were all hardcoded in. I saw this as massively inefficient, and bad coding practice. After having a think about how I could implement something better I went back to the idea of having data stored in a Json format. I created an Array of Objects that was filled with the Station Name, ID, Lat, Lon and State. Using this I then implemented while loops into both the dropdown and map point creation elements calling the data from this array.")]),a("p",[e._v("This made the map and dropdown dynamically create entries based on the array. An added benefit of this is that future teams can add in new stations and only add in one more entry to the array. They will have to place it in the correct order however for it to display correctly for the dropdown. A way around this is to have the dropdown elemets sort by Lat as that will display them in order, due to time constraints and necessity this was not implemented.")]),a("figure",[a("pre",[e._v("          "),a("code",[e._v("\nconst stationList = [\n  {name:'Darwin', id:'14015', lat:'-12.42', lon:'130.89', state:'NT'},\n  {name:'Katherine', id:'14932', lat:'-14.47', lon:'132.28', state:'NT'},\n  {name:'Dunmarra', id:'14626', lat:'-16.68', lon:'133.41', state:'NT'},\n  {name:'Tennant Creek', id:'14626', lat:'-19.65', lon:'134.19', state:'NT'},\n  {name:'Barrow Creek', id:'15502', lat:'-21.52', lon:'133.88', state:'NT'},\n  {name:'Alice Springs', id:'15590', lat:'-23.70', lon:'133.88', state:'NT'},\n  {name:'Kulgera', id:'15603', lat:'-25.84', lon:'133.30', state:'NT'},\n  {name:'Coober Pedy', id:'16090', lat:'-29.01', lon:'134.75', state:'SA'},\n  {name:'Glendambo', id:'16001', lat:'-30.96', lon:'135.73', state:'SA'},\n  {name:'Port Augusta', id:'18201', lat:'-32.50', lon:'137.71', state:'SA'},\n  {name:'Adelaide', id:'23000', lat:'-34.92', lon:'138.58', state:'SA'}\n];\n          ")]),e._v("\n        ")])]),a("p",[e._v("As can be seen in Figure 22 of the below document, the map screen ended up functioning as intended and looking very clean.")]),a("iframe",{attrs:{src:"https://www.docdroid.net/pWDkf9A/sprintfour.pdf",width:"100%",height:"500px"}})])])}],i=a("2877"),s={},r=Object(i["a"])(s,n,o,!1,null,null,null);t["default"]=r.exports}}]);
//# sourceMappingURL=sprintFour.91c4140a.js.map